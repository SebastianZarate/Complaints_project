require('dotenv').config();
const DatabaseManager = require('../src/database');

async function initializeDatabase() {
    console.log('üîß ===================================');
    console.log('   INICIALIZANDO BASE DE DATOS MYSQL');
    console.log('üîß ===================================\n');
    
    const db = new DatabaseManager();
    
    try {
        console.log('üì° Conectando a MySQL...');
        console.log(`   Host: ${process.env.DB_HOST || 'localhost'}`);
        console.log(`   Puerto: ${process.env.DB_PORT || 3306}`);
        console.log(`   Base de datos: ${process.env.DB_NAME || 'complaints_boyaca'}`);
        console.log(`   Usuario: ${process.env.DB_USER || 'root'}\n`);

        // Inicializar conexi√≥n y crear tablas
        await db.init();
        
        console.log('‚úÖ Base de datos inicializada correctamente');
        
        // Verificar que las tablas se crearon correctamente
        console.log('üîç Verificando estructura de la base de datos...');
        
        const entidades = await db.getAllEntidades();
        console.log(`‚úÖ Tabla 'entidades' creada con ${entidades.length} registros`);
        
        const quejas = await db.getAllQuejas();
        console.log(`‚úÖ Tabla 'quejas' creada con ${quejas.length} registros`);
        
        // Mostrar algunas entidades de ejemplo
        if (entidades.length > 0) {
            console.log('\nüìã Entidades disponibles:');
            entidades.slice(0, 5).forEach(entidad => {
                console.log(`   ‚Ä¢ ${entidad.nombre}`);
            });
            if (entidades.length > 5) {
                console.log(`   ‚Ä¢ ... y ${entidades.length - 5} m√°s`);
            }
        }
        
        // Verificaci√≥n de salud
        console.log('\nüè• Ejecutando verificaci√≥n de salud...');
        const healthStatus = await db.healthCheck();
        
        if (healthStatus) {
            console.log('‚úÖ Verificaci√≥n de salud exitosa');
        } else {
            console.log('‚ùå Verificaci√≥n de salud fall√≥');
        }
        
        console.log('\nüéâ ===================================');
        console.log('   INICIALIZACI√ìN COMPLETADA EXITOSAMENTE');
        console.log('üéâ ===================================');
        console.log('üí° Consejos:');
        console.log('   ‚Ä¢ Ejecuta "npm start" para iniciar el servidor');
        console.log('   ‚Ä¢ Visita http://localhost:3000/api/health para verificar el estado');
        console.log('   ‚Ä¢ Usa MySQL Workbench para administrar la base de datos');
        console.log('   ‚Ä¢ Las quejas son completamente an√≥nimas');
        console.log('=====================================\n');
        
    } catch (error) {
        console.error('\n‚ùå ===================================');
        console.error('   ERROR DURANTE LA INICIALIZACI√ìN');
        console.error('‚ùå ===================================');
        console.error(`Error: ${error.message}`);
        
        if (error.code) {
            console.error(`C√≥digo: ${error.code}`);
        }
        
        console.error('\nüîß Posibles soluciones:');
        
        switch (error.code) {
            case 'ER_ACCESS_DENIED_ERROR':
                console.error('   ‚Ä¢ Verifica las credenciales de MySQL en el archivo .env');
                console.error('   ‚Ä¢ Aseg√∫rate de que el usuario tenga permisos suficientes');
                break;
            case 'ECONNREFUSED':
                console.error('   ‚Ä¢ Verifica que MySQL est√© ejecut√°ndose');
                console.error('   ‚Ä¢ Revisa la configuraci√≥n de host y puerto');
                break;
            case 'ER_BAD_DB_ERROR':
                console.error('   ‚Ä¢ La base de datos no existe, se intentar√° crear autom√°ticamente');
                break;
            default:
                console.error('   ‚Ä¢ Revisa la configuraci√≥n en el archivo .env');
                console.error('   ‚Ä¢ Verifica que MySQL est√© instalado y funcionando');
                console.error('   ‚Ä¢ Consulta los logs para m√°s detalles');
        }
        
        console.error('\nüìã Configuraci√≥n requerida en .env:');
        console.error('   DB_HOST=localhost');
        console.error('   DB_PORT=3306');
        console.error('   DB_NAME=complaints_boyaca');
        console.error('   DB_USER=root');
        console.error('   DB_PASSWORD=tu_password_aqui');
        console.error('=====================================\n');
        
        process.exit(1);
    } finally {
        // Cerrar conexi√≥n
        await db.close();
    }
}

// Funci√≥n para mostrar informaci√≥n del sistema
function showSystemInfo() {
    console.log('‚ÑπÔ∏è  Informaci√≥n del sistema:');
    console.log(`   ‚Ä¢ Node.js: ${process.version}`);
    console.log(`   ‚Ä¢ Plataforma: ${process.platform}`);
    console.log(`   ‚Ä¢ Arquitectura: ${process.arch}`);
    console.log(`   ‚Ä¢ Memoria disponible: ${Math.round(process.memoryUsage().heapTotal / 1024 / 1024)} MB`);
    console.log(`   ‚Ä¢ Directorio: ${process.cwd()}`);
    console.log('');
}

// Ejecutar si el script se llama directamente
if (require.main === module) {
    // Mostrar informaci√≥n del sistema
    showSystemInfo();
    
    // Inicializar base de datos
    initializeDatabase().catch(error => {
        console.error('‚ùå Error cr√≠tico:', error);
        process.exit(1);
    });
}

module.exports = initializeDatabase;