services:
  # Aplicación Node.js
  app:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: quejas-boyaca-app
    restart: unless-stopped
    ports:
      - "${PORT:-3000}:3000"
    environment:
      NODE_ENV: production
      PORT: 3000
      DB_HOST: mysql
      DB_PORT: 3306
      DB_NAME: ${DB_NAME:-complaints_boyaca}
      DB_USER: ${DB_USER:-complaints_user}
      DB_PASSWORD: ${DB_PASSWORD:-secure_password_2024}
      MAX_COMPLAINTS_PER_IP: ${MAX_COMPLAINTS_PER_IP:-10}
      RATE_LIMIT_WINDOW_MINUTES: ${RATE_LIMIT_WINDOW_MINUTES:-15}
      LOG_LEVEL: info
    depends_on:
      mysql:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Base de datos MySQL
  mysql:
    image: mysql:8.0
    container_name: quejas-boyaca-mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-root_password_2024}
      MYSQL_DATABASE: ${DB_NAME:-complaints_boyaca}
      MYSQL_USER: ${DB_USER:-complaints_user}
      MYSQL_PASSWORD: ${DB_PASSWORD:-secure_password_2024}
    volumes:
      - mysql_data:/var/lib/mysql
      - ./data/database.db:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "3307:3306"
    networks:
      - app-network
    command: --default-authentication-plugin=mysql_native_password
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${MYSQL_ROOT_PASSWORD:-root_password_2024}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # Nginx como proxy reverso y servidor web
  nginx:
    image: nginx:alpine
    container_name: quejas-boyaca-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
      # Para Let's Encrypt (opcional)
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    depends_on:
      - app
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Certbot para renovación automática de certificados (opcional)
  certbot:
    image: certbot/certbot
    container_name: quejas-boyaca-certbot
    restart: "no"
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

volumes:
  mysql_data:
    driver: local

networks:
  app-network:
    driver: bridge